variables:
  DOCKER_TLS_CERTDIR: ""

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - apk add git
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      full_version="$(git describe --always --tags --abbrev=0 --match='v[0-9].*')"
      upstream_version="$(echo $full_version | cut -d- -f1 | tr _ . )"
      image="$CI_REGISTRY_IMAGE"
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]] ; then
        section="main"
      else
        prio="~${CI_COMMIT_REF_SLUG//-/+}+"
        image="${image}:${CI_COMMIT_REF_SLUG}"
      fi
      pkg_version="${prio}$(date '+%Y%m%dT%H%M%S').g$(git rev-parse --short HEAD)"
      echo "Running on branch '$CI_COMMIT_BRANCH': package = '$pkg_version' ; container = '$image'"
    - docker network create sdk_build || echo "docker network already exists ?"
    - >
      docker build --pull \
                   --network=sdk_build \
                   --build-arg CI_PROJECT_NAME --build-arg CI_PROJECT_URL --build-arg CI_JOB_TOKEN \
                   --build-arg UPVER="${upstream_version:1}" --build-arg PKGVER="${pkg_version}" \
                   ${section:+--build-arg SECTION=${section}} \
                   -f Containerfile -t "${image}" .
    # Export the container (mainly for build debugging purpose)
    - docker push "${image}"
  # Run this job in a branch where a Containerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Containerfile

# Rebuild the rivos-sdk image if this is the branch the SDK is using.
# Currently the 'latest' tag from the 'rivos/main' branch.
update-sdk:
  stage: deploy
  only:
    - rivos/main
  trigger: rv/it/rivos-sdk
